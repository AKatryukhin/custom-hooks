pwd - где находимся
ls - список файлов в папке
cd - перейти в выбранную папку

Создаем:
mkdir project - создали папку
cd project - перешли в папку
git init -активаровали Гит в этой директории
touch hello.html - создали html

Можно сразу через $$:

mkdir project $$ cd project $$ git init $$ touch index.html style.css
Для Комитов:
feat - сообщает о добавлении новой функциональности в проект. Сюда входит любой законченный блок кода, который выполняет поставленную задачу. Это может быть полностью свёрстанная шапка проекта, футер, агрегатор новостей.
fix - сообщает об исправленных ошибках в коде. Так некликабельная ссылка — ошибка, а изменения стилей и разметки — её исправление.
style - сообщает о визуальных исправлениях в коде. Они не связаны с функциональностью и ошибками и не отражаются на написанном коде. Сюда входят изменения табуляции, отступов, знаков препинания.
refactor - сообщает о переработке кода. Не влияет на исправление ошибок и изменение функциональности. Это может быть изменение порядка написания CSS-свойств в селекторах, дробление одной JavaScript-функции на несколько небольших.
subject - завершающая часть заголовка с более развёрнутым описанием блока type.

Копирование:
cp что_копируем куда_копируем
cp index.html ./src
# копируем index.html в папку src

Или сразу несколько файлов:
cp что_копируем что_копируем куда_копируем
cp index.html style.css script.js ./src
# копируем 3 файла — index.html, style.css и script.js — в папку src 


Перемещение файлов и папок mv
После имени команды указывают список файлов и папок, которые нужно переместить,
а затем — папку, в которую нужно сложить файлы.
	

Просмотр содержимого cat
cat index.html

cat -n index.html - Ключ -n включает нумерацию строк

Как выйти из Vim: ESC, ввести :wq и нажать Enter

git checkout -b название_ветки # git создаст новую ветку и переключится в неё
git checkout -b feature/header 
git push --set-upstream origin feature/header - запушит новую ветку в удаленный репозиторий и будет отсеживать
git branch -D <имя_ветки> # удалить ветку из локального репозитория
git push origin --delete <имя_ветки> # удалить ветку из удаленного репозитория
git stash - спрячет незакомиченные изменения в ветке, после этого можно переключиться в основную ваетку и там работать, а сюда вернуться позже
git stash save stashed_changes_name - можно обозвать эти незакомиченные изменения
git stash list - показ списка спрятанных во всех ветках изменений и, если для стэша не задано имя, последнего коммита в этой ветке	
git stash pop - — возврат последних изменений в любой ветке
git stash apply stash@{n} - возврат выбранных спрятанных изменений из листа стэша, где n — номер в нём
git stash clear -  очищает лист «стэша» и не даёт запутаться в данных



СЛИЯНИЕ
git checkout main # переключились в main
git merge feature/header # перенесет в main все коммиты 
git revert -m 1 3f0d8da /* 3f0d8da это хеш последнего комита при слиянии*/ - ОТМЕНА слияния
git revert 3f0d8da - отмена изменений выбранного коммита

git init
echo >> README.md

Начало работы:
git config --global user.name "______"
git config --global user.email "_____@yandex.ru"

После создания репозитория на Git Hub, добавляем наш репозиторий на сервер (все подсказки есть на экране в Git):

git remote add test https://github.com/AKatryukhin/test.git
git push -u test master


Если что-то поменял, то делай:
$ git status
$ git add –A  (либо название\расширение файла - напирмер *html) Снять индексацию изменений можно git reset
$ git add .  - добавит изменения ко всему текущему каталогу - самый простой способ добавления изменений во все файлы каталога.
$ git commit -a -m "Мой третий комит"
$ git push - пушь изменения в удаленный репозиторий 
$ git pull - забрать из удаленного репозитория чужие изменения

Если после git commit ругается # Please enter the commit messa ge for your changes. Lines starting, то:
В первой строке введите комментарий: «Added h1 tag». Сохраните файл и выйдите из редактора (для этого в редакторе по умолчанию (Vim) вам нужно нажать клавишу ESC, ввести :wq и нажать Enter).

Алиасы:gi
git config --global alias.co checkout
git config --global alias.ci commit
git config --global alias.st status
git config --global alias.br branch
git config --global alias.hist "log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short"
git config --global alias.type 'cat-file -t'
git config --global alias.dump 'cat-file -p'

А вот эти не поддерживаются в VS code:

alias gs='git status '
alias ga='git add '
alias gb='git branch '
alias gc='git commit'
alias gd='git diff'
alias gco='git checkout '
alias gk='gitk --all&'
alias gx='gitx --all'
alias got='git '
alias get='git '

Работа с другого ПК:

На сайте GIT в своем репозитории захожу в CLONE и копирую адрес перозитория,
затем в VScode - Terminal выхожу из рабочей папки: 
cd ..
И захожу в новую папку (свою пустую):
cd work
Далее прописываю git clone и вставляю скопированный ранее путь и указываю еще одну новую папку, куда все разместим "project2":
git clone https://github.com/AKatryukhin/test2.git project2

Заново открываю VScode, папку с новым моим репозиторием.
И теперь работаю с помощью Terminal.
Т.е. если делаю какие-либо изменения, то делаю:
git add –A  (либо название\расширение файла - напирмер *html) 
git commit -m "Мой какой-нибудь новый комит"
$ git push - пушь изменения в удаленный репозиторий

Чтобы дома на другом ПК открыть репозиторий с изменениями, сдкланными в клоне, мне необходимо:
открыть в VScode свою рабочую папку и в терминале прописать:
git pull
Теперь у меня появились все изменения, сделанные в клонированном репозитории. 

При работе в команде ВСЕГДА в начале работы пиши git pull. Т.е. подгрузить все сделанные мной или кем-либо изменения и работать уже с актуальной версией. 
Чтобы при какой-либо ошибке выйти из терминала в VScode нужно: нажать ctrl+C - 2 раза, ввести :wq! и нажать Enter.
При работе в команде обязательно создавать файл с расширением .gitignore , куда прописываем свпомогательные файлы и папки, используемые в проектк и расположеные локально в папке репозитория, но которые не нужно копировать на Git.

Для удобного и красивого просмотра изменений и для работы с репозиториями есть сервис GitKraken. Его скачать как программу и авторизоваться через Git.

ВСЕ ДЛЯ РАБОТЫ ЧЕРЕЗ Git bash:

Создаем:
mkdir hello
cd hello
touch hello.html

Начало работы:
git config --global user.name "AKatryukhin"
git config --global user.email "A.Katryukhin@yandex.ru"

git config --global core.autocrlf true
git config --global core.safecrlf warn
git config --global core.quotepath off

gco <hash> - получить старую версию
gco master - вернуться к последней версии в ветке
cat Index.html - увижу свой html без изменений (в состоянии указанного ХЭШа)
git tag v1 - создать ТЕГ
gco v1~1 - вернуться на шаг к предыдущей версии
git tag v1-beta - создать ТЕГ для предыдущей версии
gco v1-beta - переключиться к предыдущему ТЕГу
git tag - посмотреть все имеющиеся ТЕГи
git hist master --all - просмотр ТЕГов в логах
gco Index.html - переключиться на последний сохраненный в репозитории, до индексации
git reset HEAD Index.html - отмена проиндексированных изменений (уже add, но до комита)
git revert HEAD - отмена последнего комита, либо
git revert HASH - отмена любого другого комита
!!!Если сделал неверно, то создай ТЕГ до внесения исправлений!!!!
назову его oops
git reset --hard v1 - удаляет последний и возвращает в v1
git hist --all - здесь вижу даже удаленные ошибочные
gco oops - могу переключиться к удаленному ошибочному ТЕГу
git tag -d oops - удалить ошибочный ТЕГ из истории навсегда
git commit --amend -m "новый комментарий"- изменить предыдущий комит
cat .git/HEAD - ссылка на текущую ветку.
git hist --max-count=1 - поиск последнего комита
git cat-file -t <hash> - вывод последнего комита (смотрю хэш в просмотре выше)
git cat-file -p <hash>- вывод последнего комита (смотрю хэш в просмотре выше)
либо алиасы:
git type <hash>- вывод последнего комита (смотрю хэш в просмотре выше)
git dump <hash>- вывод последнего комита (смотрю хэш в просмотре выше)
git dump <treehash> - поиск дерева
git dump <indexhash> - вывод каталога index

Перемещение в новый каталог:
mkdir lib - создание каталога
git mv hello.html lib - перемещение в новый каталог
git status

Создание ветки:
gco -b style
gs
git checkout -b <имяветки> является шорткатом для git branch <имяветки> за которым идет git checkout <имяветки>.

Слияние:
gco style
git merge master
git hist --all

Сброс:
git reset --hard <hash> - сброс ветки до нужного комита (сбрасываю ветки до конфликтующих комитов, для перебазирования)

Перебазирование:
git checkout style
git rebase master - перебазирование (объединяет и добавляет все комиты другой ветки - это больше чем слияние, но в публичных ветках лучше использовать слияние).
git hist

Клонирование:
cd ..
pwd
ls - просмотр репозиториев в каталоге

git clone hello cloned_hello - клонирование

cd cloned_hello -переход в клонированный репозиторий
ls - просмотр клонированного репозитория

git branch - увижу все ЛОКАЛЬНЫЕ ветки
git branch -a - увижу ВСЕ ветки, в т.ч. удаленные

Извлечние изменений из удаленного репозитория:
cd ../cloned1_hello - перехожу в клонированный реп
git fetch - извлекает новые коммиты из удаленного репозитория, но сливает их с моими наработками в локальных ветках
git hist --all

Слияние извлеченных изменений:
git merge origin/master
git pull - эквивалентна (может заменять): git fetch + git merge origin/master

Добавить локальную ветку для слежки за удаленной веткой:
git branch --track style origin/style
git branch -a
git hist --max-count=2

Создать чистый репозиторий:
cd ..
git clone --bare hello hello.git
ls hello.git
Добавить чистый репозиторий в качестве удаленного репозитория к нашему оригинальному
cd hello
git remote add shared ../hello.git

Добавить какие-либо изменения в удаленный репозиторий:
git push shared master - обязательно указываю ветку

Извлечение общих изменений:
cd ../cloned_hello - перехожу в удаленный репозиторий

git remote add shared ../hello.git
git branch --track shared master
git pull shared master
cat README

Запуск git сервера:
# (From the work directory)
git daemon --verbose --export-all --base-path=.

В отдельном окне терминала:
# (From the work directory)
git clone git://localhost/hello.git network_hello
cd network_hello
ls

